/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2022-04-21 16:42:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.base;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/tiles-jsp-2.2.2.jar", Long.valueOf(1635586848479L));
    _jspx_dependants.put("jar:file:/C:/tiger/TigerProjet/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/tiger1/WEB-INF/lib/tiles-jsp-2.2.2.jar!/META-INF/tld/tiles-jsp.tld", Long.valueOf(1276606224000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\t(function() {\r\n");
      out.write("\t\tvar w = window;\r\n");
      out.write("\t\tif (w.ChannelIO) {\r\n");
      out.write("\t\t\treturn (window.console.error || window.console.log || function() {\r\n");
      out.write("\t\t\t})('ChannelIO script included twice.');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar ch = function() {\r\n");
      out.write("\t\t\tch.c(arguments);\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tch.q = [];\r\n");
      out.write("\t\tch.c = function(args) {\r\n");
      out.write("\t\t\tch.q.push(args);\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tw.ChannelIO = ch;\r\n");
      out.write("\t\tfunction l() {\r\n");
      out.write("\t\t\tif (w.ChannelIOInitialized) {\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tw.ChannelIOInitialized = true;\r\n");
      out.write("\t\t\tvar s = document.createElement('script');\r\n");
      out.write("\t\t\ts.type = 'text/javascript';\r\n");
      out.write("\t\t\ts.async = true;\r\n");
      out.write("\t\t\ts.src = 'https://cdn.channel.io/plugin/ch-plugin-web.js';\r\n");
      out.write("\t\t\ts.charset = 'UTF-8';\r\n");
      out.write("\t\t\tvar x = document.getElementsByTagName('script')[0];\r\n");
      out.write("\t\t\tx.parentNode.insertBefore(s, x);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (document.readyState === 'complete') {\r\n");
      out.write("\t\t\tl();\r\n");
      out.write("\t\t} else if (window.attachEvent) {\r\n");
      out.write("\t\t\twindow.attachEvent('onload', l);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\twindow.addEventListener('DOMContentLoaded', l, false);\r\n");
      out.write("\t\t\twindow.addEventListener('load', l, false);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})();\r\n");
      out.write("\tChannelIO('boot', {\r\n");
      out.write("\t\t\"pluginKey\" : \"a504fa61-c944-4cca-bb6e-aae19ca41801\"\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
